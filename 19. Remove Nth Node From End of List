Given the head of a linked list, remove the nth node from the end of the list and return its head.

 

Example 1:
Input: head = [1,2,3,4,5], n = 2
Output: [1,2,3,5]

Example 2:
Input: head = [1], n = 1
Output: []

Example 3:
Input: head = [1,2], n = 1
Output: [1]




Code
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode removeNthFromEnd(ListNode head, int n) {
        ListNode first= head;
        ListNode sec= head;
        while(n>0 && sec!=null){
            n--;
            sec= sec.next;
        }
        if(n!=0){
            return head;
        }
        if(sec==null){
            ListNode temp=head;
            head=head.next;
            temp.next=null;
            return head;
        }
        ListNode prev= null;
        while(sec!=null){
            sec=sec.next;
            prev=first;
            first=first.next;
        }
        prev.next=first.next;
        first.next=null;
        return head;
    }
}
