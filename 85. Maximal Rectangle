Given a rows x cols binary matrix filled with 0's and 1's, find the largest rectangle containing only 1's and return its area.

 

Example 1:
Input: matrix = [["1","0","1","0","0"],["1","0","1","1","1"],["1","1","1","1","1"],["1","0","0","1","0"]]
Output: 6
Explanation: The maximal rectangle is shown in the above picture.

Example 2:
Input: matrix = [["0"]]
Output: 0

Example 3:
Input: matrix = [["1"]]
Output: 1







Code
class Solution {
    public int maximalRectangle(char[][] matrix) {
        // if there are no rows then return 
        if(matrix.length == 0){
            return 0;
        }
        // find noumbers of columns in a row
        int heights[]= new int[matrix[0].length];
        int largest=0;
        for(int i=0; i<matrix.length ; i++){
            for(int j=0; j<matrix[i].length; j++){
                int val=matrix[i][j]-'0'; // char to int conversion
                if(matrix[i][j]==0){
                    heights[j]=0;
                }else{
                    heights[j]+=val;
                }
            }
            int maxArea=largestRectangleArea(heights);
            if(largest < maxArea){
                largest= maxArea;
            }
        }
        return largest;

    }

     public int largestRectangleArea(int[] heights) {
        // using single stack and calculating previous smallers at every next smaller (custom stack)
        int n = heights.length;
		int stack[] = new int[n+1];
		int index=-1;
		int max = Integer.MIN_VALUE;
		for(int i=0;i<=n;i++){
			int element =(i==n)?0:heights[i];
			while(index!=-1 && heights[stack[index]]>element) {
				int h = heights[stack[index--]];
				int ps = (index==-1)?-1:stack[index];
				int w = i - ps -1;
				max = Math.max(max, h*w); 
			}
			stack[++index] = i;
		}
		return (max==Integer.MIN_VALUE)?0:max;
    }
}
