Given a string containing just the characters '(' and ')', return the length of the longest valid (well-formed) parentheses substring.

 

Example 1:
Input: s = "(()"
Output: 2
Explanation: The longest valid parentheses substring is "()".

Example 2:
Input: s = ")()())"
Output: 4
Explanation: The longest valid parentheses substring is "()()".

Example 3:
Input: s = ""
Output: 0






Code
class Solution {
// Case 2
    public int longestValidParentheses(String s) {
        int len= s.length();
        int stack[]= new int[len+1];
        int index= -1;
        int max=0;
        stack[++index]= -1;
        for(int i=0; i<len; i++){
            char ch= s.charAt(i);
            if(ch=='('){
                stack[++index]= i;
            }else{
                index--;
                if(index==-1){
                    stack[++index]=i;
                }else{
                    max= Math.max(max,i-stack[index]);
                }
            }
        }
        return max;
    }
}

// Case 1
/*
 public int longestValidParentheses(String s) {
        Stack<Integer> stack= new Stack<>();
        int max=0;
        stack.push(-1);
        for(int i=0; i<s.length(); i++){
            char ch= s.charAt(i);
            if(ch=='('){
                stack.push(i);
            }else{
                stack.pop();
                if(stack.isEmpty()){
                    stack.push(i);
                }
                max= Math.max(max,i-stack.peek());
            }
        }
        return max;
    }
*/
 
