A parentheses string is valid if and only if:

It is the empty string,
It can be written as AB (A concatenated with B), where A and B are valid strings, or
It can be written as (A), where A is a valid string.
You are given a parentheses string s. In one move, you can insert a parenthesis at any position of the string.

For example, if s = "()))", you can insert an opening parenthesis to be "(()))" or a closing parenthesis to be "())))".
Return the minimum number of moves required to make s valid.

 

Example 1:
Input: s = "())"
Output: 1

Example 2:
Input: s = "((("
Output: 3







Code
class Solution {
// without stack
    public int minAddToMakeValid(String s) {
        int open =0;
        int close=0;
        for(int i=0;i<s.length(); i++){
            char ch=s.charAt(i);
            if(ch=='('){
                open++;
            }else{
                if(open<=0){
                    close++;
                }else{
                    open--;
                }
            }
        }
        return (open+close);
    }
}

// using stack
/*
public int minAddToMakeValid(String s) {
        Stack<Character> stack =new Stack<>();
        for(int i=0;i<s.length(); i++){
            char ch=s.charAt(i);
            if(ch=='('){
                stack.push(ch);
            }else{
                if(stack.isEmpty() || stack.peek()==')'){
                    stack.push(ch);
                }else{
                    stack.pop();
                }
            }
        }
        return stack.size();
    }
*/
 
