Given the head of a linked list, reverse the nodes of the list k at a time, and return the modified list.

k is a positive integer and is less than or equal to the length of the linked list. If the number of nodes is not a multiple of k then left-out nodes, in the end, should remain as it is.

You may not alter the values in the list's nodes, only nodes themselves may be changed.

 

Example 1:
Input: head = [1,2,3,4,5], k = 2
Output: [2,1,4,3,5]

Example 2:
Input: head = [1,2,3,4,5], k = 3
Output: [3,2,1,4,5]
 





Code
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public int len(ListNode head){
        int counter=0;
        while(head!=null){
            counter++;
            head=head.next;
        }
        return counter;
    }

    public ListNode reverseKGroup(ListNode head, int k) {
        int n= len(head);
        int group= n/k;
        ListNode preHead= null;
        ListNode currHead = head;
        ListNode ansNode = null;
        for(int i=0; i<group; i++){
            ListNode prev = null;
            ListNode cur = currHead;
            ListNode nextNode = null;
            // reverce group
            for(int j=0; j<k; j++){
                nextNode= cur.next;
                cur.next = prev;
                prev= cur;
                cur= nextNode;
            }
            if(preHead == null){
                ansNode=prev;
            }else{
                preHead.next= prev;
            }
            preHead = currHead;
            currHead = cur;
        }
        preHead.next= currHead;
        return ansNode;
    }
}
