Given an array nums of n integers where nums[i] is in the range [1, n], return an array of all the integers in the range [1, n] that do not appear in nums.

 

Example 1:
Input: nums = [4,3,2,7,8,2,3,1]
Output: [5,6]

Example 2:
Input: nums = [1,1]
Output: [2]








Code
class Solution {
    public List<Integer> findDisappearedNumbers(int[] nums) {
        cycleSort(nums);
        List<Integer> list= new ArrayList<Integer>();
        for(int i=0; i<nums.length; i++){
            if(nums[i]!=i+1){
                list.add(i+1);
            }
        }
        return list;
    }
    public void cycleSort(int nums[]){
        int n= nums.length;
        int index=0;
        while(index<n){
            int element=nums[index];
            int correctPos= element-1;
            if(nums[index]!=nums[correctPos]){
                swap(nums, index, correctPos);
            }else{
                index++;
            }
        }
    }
    public void swap(int arr[], int index1, int index2){
        int temp= arr[index1];
        arr[index1]=arr[index2];
        arr[index2]=temp;
    }

}
