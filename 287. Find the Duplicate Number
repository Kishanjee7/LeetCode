Given an array of integers nums containing n + 1 integers where each integer is in the range [1, n] inclusive.

There is only one repeated number in nums, return this repeated number.

You must solve the problem without modifying the array nums and using only constant extra space.

 

Example 1:

Input: nums = [1,3,4,2,2]
Output: 2
Example 2:

Input: nums = [3,1,3,4,2]
Output: 3
Example 3:

Input: nums = [3,3,3,3,3]
Output: 3


Code
class Solution {
    public int findDuplicate(int[] nums) {
        cycleSort(nums);
        for(int i=0; i<nums.length; i++){
            if(nums[i]!=i+1){
                return nums[i];
            }
        }
        return -1;
    }
    public void cycleSort(int nums[]){
        int n= nums.length;
        int index=0;
        while(index<n){
            int element=nums[index];
            int correctPos= element-1;
            if(nums[index]!=nums[correctPos]){
                swap(nums, index, correctPos);
            }else{
                index++;
            }
        }
    }
    public void swap(int arr[], int index1, int index2){
        int temp= arr[index1];
        arr[index1]=arr[index2];
        arr[index2]=temp;
    }

    
}
